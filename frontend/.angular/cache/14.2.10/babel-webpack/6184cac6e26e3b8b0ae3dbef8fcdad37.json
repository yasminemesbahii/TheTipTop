{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport var TextAlignment = /*#__PURE__*/(() => {\n  (function (TextAlignment) {\n    TextAlignment[\"INNER\"] = \"inner\";\n    TextAlignment[\"OUTER\"] = \"outer\";\n    TextAlignment[\"CENTER\"] = \"center\";\n  })(TextAlignment || (TextAlignment = {}));\n\n  return TextAlignment;\n})();\nexport var TextOrientation = /*#__PURE__*/(() => {\n  (function (TextOrientation) {\n    TextOrientation[\"HORIZONTAL\"] = \"horizontal\";\n    TextOrientation[\"VERTICAL\"] = \"vertical\";\n    TextOrientation[\"CURVED\"] = \"curved\";\n  })(TextOrientation || (TextOrientation = {}));\n\n  return TextOrientation;\n})();\nexport let NgxWheelComponent = /*#__PURE__*/(() => {\n  class NgxWheelComponent {\n    constructor() {\n      this.onSpinStart = new EventEmitter();\n      this.onSpinComplete = new EventEmitter();\n      this.completedSpin = false;\n      this.isSpinning = false;\n    }\n\n    reset() {\n      this.wheel.stopAnimation(false);\n      this.wheel.rotationAngle = 0;\n      this.wheel.ctx.clearRect(0, 0, this.wheel.ctx.canvas.width, this.wheel.ctx.canvas.height);\n      this.isSpinning = false;\n      this.completedSpin = false;\n      this.ngAfterViewInit();\n    }\n\n    ngOnInit() {}\n\n    spin() {\n      if (this.completedSpin || this.isSpinning) return;\n      this.isSpinning = true;\n      this.onSpinStart.emit(null);\n      const segmentToLandOn = this.wheel.segments.filter(x => !!x).find(({\n        id\n      }) => this.idToLandOn === id);\n      const segmentTheta = segmentToLandOn.endAngle - segmentToLandOn.startAngle;\n      this.wheel.animation.stopAngle = segmentToLandOn.endAngle - segmentTheta / 4;\n      this.wheel.startAnimation();\n      setTimeout(() => {\n        this.completedSpin = true;\n        this.onSpinComplete.emit(null);\n      }, this.spinDuration * 1000);\n    }\n\n    ngAfterViewInit() {\n      const segments = this.items; // @ts-ignore\n\n      this.wheel = new Winwheel({\n        numSegments: segments.length,\n        segments,\n        innerRadius: this.innerRadius || 0,\n        outerRadius: this.height / 2 - 20,\n        centerY: this.height / 2 + 20,\n        textOrientation: this.textOrientation,\n        textAligment: this.textAlignment,\n        animation: {\n          type: 'spinToStop',\n          duration: this.spinDuration,\n          spins: this.spinAmount // The number of complete 360 degree rotations the wheel is to do.\n\n        }\n      }); // @ts-ignore\n\n      TweenMax.ticker.addEventListener(\"tick\", this.drawPointer.bind(this));\n    }\n\n    ngOnDestroy() {\n      // @ts-ignore\n      TweenMax.ticker.removeEventListener(\"tick\");\n    }\n\n    drawPointer() {\n      let c = this.wheel.ctx; // Create pointer.\n\n      if (c) {\n        c.save();\n        c.lineWidth = 2;\n        c.strokeStyle = this.pointerStrokeColor;\n        c.fillStyle = this.pointerFillColor;\n        c.beginPath();\n        c.moveTo(this.width / 2 - 20, 2);\n        c.lineTo(this.width / 2 + 20, 2);\n        c.lineTo(this.width / 2, 42);\n        c.lineTo(this.width / 2 - 20, 2);\n        c.stroke();\n        c.fill();\n        c.restore();\n      }\n    }\n\n  }\n\n  NgxWheelComponent.ɵfac = function NgxWheelComponent_Factory(t) {\n    return new (t || NgxWheelComponent)();\n  };\n\n  NgxWheelComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxWheelComponent,\n    selectors: [[\"ngx-wheel\"]],\n    inputs: {\n      height: \"height\",\n      idToLandOn: \"idToLandOn\",\n      width: \"width\",\n      items: \"items\",\n      spinDuration: \"spinDuration\",\n      spinAmount: \"spinAmount\",\n      innerRadius: \"innerRadius\",\n      pointerStrokeColor: \"pointerStrokeColor\",\n      pointerFillColor: \"pointerFillColor\",\n      disableSpinOnClick: \"disableSpinOnClick\",\n      textOrientation: \"textOrientation\",\n      textAlignment: \"textAlignment\"\n    },\n    outputs: {\n      onSpinStart: \"onSpinStart\",\n      onSpinComplete: \"onSpinComplete\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"id\", \"canvas\", 3, \"width\", \"height\", \"click\"]],\n    template: function NgxWheelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"canvas\", 0);\n        i0.ɵɵlistener(\"click\", function NgxWheelComponent_Template_canvas_click_0_listener() {\n          return !ctx.disableSpinOnClick && ctx.spin();\n        });\n        i0.ɵɵtext(1, \" \\u00A0\\u00A0\\u00A0\\u00A0Canvas not supported, use another browser. \");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"width\", ctx.width)(\"height\", ctx.height);\n      }\n    },\n    encapsulation: 2\n  });\n  return NgxWheelComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}